# Default values for dhis2.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: dhis2/core
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2.35.3"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

commonLabels: {}

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

recreatePodsWhenConfigMapChange: true

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 180
  failureThreshold: 10
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 120
  failureThreshold: 10

postgres:
  port: 5432
  host: ""
  username: ""
  password: ""
  database: ""

# Uses tpl function hence it can read values from references e.g .Values.postgres.port -> 5432
dhisConf: |
  connection.dialect = org.hibernate.dialect.PostgreSQLDialect
  connection.driver_class = org.postgresql.Driver

  # "db" maps to service name defined in Docker Compose
  # "dhis2" maps to POSTGRES_DB defined in Docker Compose
  connection.url = jdbc:postgresql://{{ .Values.postgres.host }}:{{ .Values.postgres.port }}/{{ .Values.postgres.database}}

  # maps to POSTGRES_USER environment variable in Docker Compose.
  connection.username = {{ .Values.postgres.username }}

  # maps to POSTGRES_PASSWORD environment variable in Docker Compose.
  connection.password =  {{ .Values.postgres.password }}

vpa:
  enabled: true
  updatePolicy:
    updateMode: "Off"
  resourcePolicy: {}

pdb:
  enabled: false
  minAvailable: ""
  maxUnavailable: 1

initResources: {}

dhis2Home: "/opt/dhis2"

env:
#  - name: DHIS2_HOME
#    value: "{{ .Values.dhis2Home }}"
