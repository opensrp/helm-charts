# Default values for dhis2-fhir-adapter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: opensrp/dhis2-fhir-adapter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: dhis2-fhir-adapter.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

commonLabels: {}

recreatePodsWhenConfigMapChange: true

vpa:
  enabled: true
  updatePolicy:
    updateMode: "Off"
  resourcePolicy: {}

extraVolumeMounts:

extraVolumes:

readinessProbe:
  initialDelaySeconds: 120
  failureThreshold: 30
  timeoutSeconds: 5
  httpGet:
    path: /actuator/health
    port: http

livenessProbe:
  initialDelaySeconds: 120
  failureThreshold: 60
  timeoutSeconds: 10
  httpGet:
    path: /actuator/info
    port: http

# Enables dev spring profile to allow spring boot STD_OUT logging, which is crucial for kubectl logs
# At the moment the purpose of dev profile is to update root loggers
env: |
  - name: SPRING_PROFILES_ACTIVE
    value: dev

# Replace with you application configurations
# Pick sample from https://github.com/opensrp/dhis2-fhir-adapter/blob/master/app/src/main/resources/default-application.yml
# Uses tpl function hence it can read values from references
applicationConfig:
  server:
    # The default port on which HTTP connections will be available when starting
    # the Adapter as a standalone application.
    port: 8080
#  spring:
#    datasource:
#      # The JDBC URL of the database in which the Adapter tables are located.
#      url: jdbc:postgresql://postgres/dhi2_fhir_adapter
#      # The username that is required to connect to the database.
#      username: username
#      # The password that is required to connect to the database.
#      password: strongpassword
#    flyway:
#      enabled: false
#      check-location: false
#      baselineOnMigrate: true
#    data:
#      rest:
#        basePath: /api
#        detection-strategy: annotated
#    jpa:
#      generate-ddl: false
#      show-sql: true
#      hibernate:
#        ddl-auto: none
#        dialect: org.hibernate.dialect.PostgreSQLDialect
#        hbm2ddl.auto: update
#      open-in-view: false
#      properties:
#        hibernate:
#          jdbc:
#            time_zone: UTC
#    application:
#      name: DHIS2 FHIR Adapter
#
#  dhis2.fhir-adapter:
#    # Configuration of DHIS2 endpoint that is accessed by the adapter.
#    endpoint:
#      # The base URL of the DHIS2 installation.
#      url: http://localhost:8080
#      # The API version that should be accessed on the DHIS2 installation.
#      api-version: 30
#      # Authentication data to access metadata on DHIS2 installation.
#      # The complete metadata (organization units, tracked entity types,
#      # tracked entity attributes, tracker programs, tracker program stages)
#      # must be accessible.
#      system-authentication:
#        # The username that is used to connect to DHIS2 to access the metadata.
#        username: admin
#        # The password that is used to connect to DHIS2 to access the metadata.
#        password: district
#
#  logging:
#    file: ${dhis2.home}/services/fhir-adapter/logs/dhis2-fhir-adapter.log
