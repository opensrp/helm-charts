# Default values for hapi-fhir.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: hapiproject/hapi
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v5.4.1"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

commonLabels: {}

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

recreatePodsWhenConfigMapChange: true

postgres:
  port: 5432
  host: ""
  username: "fhir"
  password: ""
  database: "fhir"

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 120
  failureThreshold: 5

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60

# Replaces the existing application configuration file
# Reference file: https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/resources/application.yaml
# or https://github.com/opensrp/hapi-fhir-jpaserver-starter/blob/master/src/main/resources/application.yaml
# Uses tpl function hence it can read values from references
applicationConfig:
#  spring:
#    datasource:
#      driverClassName: org.postgresql.Driver
#      url: "jdbc:postgresql://{{ .Values.postgres.host }}:{{ .Values.postgres.port }}/{{ .Values.postgres.database }}"
#      username: "{{ .Values.postgres.username }}"
#      password: "{{ .Values.postgres.password }}"
#      max-active: 15
#    jpa:
#      properties:
#        hibernate.format_sql: false
#        hibernate.show_sql: false
#    batch:
#      job:
#        enabled: false
#
#  hapi:
#    fhir:
#      fhir_version: R4
#      tester:
#        home:
#          name: Local Tester
#          server_address: 'http://localhost:8080/fhir'
#          refuse_to_fetch_third_party_urls: false
#          fhir_version: R4
#
#        global:
#          name: Global Tester
#          server_address: "http://hapi.fhir.org/baseR4"
#          refuse_to_fetch_third_party_urls: false
#          fhir_version: R4
#
#  sentry:
#    enabled: false
#    options:
#      dsn:
#      release:  "{{ .Values.image.tag }}"
#      environment: staging
#      tags: '{{ include "hapi-fhir.sentryTags" . }}'
#      additionalTags:
##        key: value
#      debug: false
#    minimumEventLevel: ERROR
#    minimumBreadcrumbLevel: INFO

vpa:
  enabled: true
  updatePolicy:
    updateMode: "Off"
  resourcePolicy: {}

pdb:
  enabled: false
  minAvailable: ""
  maxUnavailable: 1

env:
#   - name: JAVA_OPTS
#     value: "-XX:+UseStringDeduplication -XX:+UseG1GC"
